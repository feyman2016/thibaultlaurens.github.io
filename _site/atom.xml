<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Thibault Laurens</title>
 <link href="http://thibaultlaurens.github.io/" rel="self"/>
 <link href="http://thibaultlaurens.github.io"/>
 <updated>2017-06-23T17:33:59+01:00</updated>
 <id>http://thibaultlaurens.github.io</id>
 <author>
   <name>Thibault Laurens</name>
   <email>laurens.thibault@gmail.com</email>
 </author>

 
 <entry>
   <title>How the V8 engine works?</title>
   <link href="http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works"/>
   <updated>2013-04-29T00:00:00+01:00</updated>
   <id>http://thibaultlaurens.github.io/javascript/2013/04/29/how-the-v8-engine-works</id>
   <content type="html">
&lt;h4 id=&quot;what-is-v8&quot;&gt;What is V8?&lt;/h4&gt;
&lt;p&gt;V8 is a &lt;strong&gt;JavaScript engine&lt;/strong&gt; built in the google development center in Germany. It is
&lt;a href=&quot;https://code.google.com/p/v8/wiki/Source&quot; title=&quot;code.google.com/p/v8/wiki/Source&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;open source&lt;/strong&gt;&lt;/a&gt; and written in &lt;strong&gt;C++&lt;/strong&gt;. It is used for both client side (Google Chrome) and server side (node.js) JavaScript applications.&lt;/p&gt;

&lt;p&gt;V8 was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a &lt;strong&gt;JIT (Just-In-Time) compiler&lt;/strong&gt; like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn’t produce bytecode or any intermediate code.&lt;/p&gt;

&lt;p&gt;The aim of this article is to show and to understand &lt;strong&gt;how V8 works, in order to produce optimized code&lt;/strong&gt; for both client side or server side applications. If you are already asking yourself “Should I care about JavaScript performance?” then I will answer with a citation, from Daniel Clifford (tech lead and manager of the V8 team): “It’s not just about making your current application run faster, it’s about enabling things that you have never been able to do in the past”.&lt;/p&gt;

&lt;div class=&quot;six centered columns&quot;&gt;
    &lt;img alt=&quot;V8!&quot; src=&quot;/assets/themes/twitter/img/post/21-03-13-v8/v8.PNG&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;hidden-class&quot;&gt;Hidden class&lt;/h4&gt;
&lt;p&gt;JavaScript is a protoptye-based language: there are &lt;strong&gt;no classes&lt;/strong&gt; and objects are created by using a cloning process. Also, JavaScript is dynamically typed: types and type informations are not explicit and properties can be added to and deleted from objects on the fly. Accessing types and properties effectively makes a first big challenge for V8. Instead of using a dictionary-like data structure for storing object properties and doing a dynamic lookup to resolve the property location (like most JavaScript engines do), V8 creates &lt;strong&gt;hidden classes&lt;/strong&gt;, at runtime, in order to have an internal representation of the type system and to improve the property access time.&lt;/p&gt;

&lt;p&gt;Let’s have for instance a “Point” function and the creation of two “Point” objects:&lt;/p&gt;

&lt;div class=&quot;ten centered columns&quot;&gt;
    &lt;img alt=&quot;hidden class&quot; src=&quot;/assets/themes/twitter/img/post/21-03-13-v8/hiddenclass.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;If the layouts are the same, which is the case here, p and q belong to the same hidden class created by V8. This highlights another advantage of using hidden classes: it allows V8 to group objects whose properties are the same. Here “p” and “q” use the same &lt;strong&gt;optimized code&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now let’s assume that we want to add a “z” property to our “q” object, right after its declaration (which is perfectly fine with a dynamically typed language).&lt;/p&gt;

&lt;p&gt;How will V8 deal with this scenario?
In fact, V8 &lt;strong&gt;creates a new hidden class everytime the constructor function declares a property&lt;/strong&gt; and keeps track of the change in the hidden class. Why? Because if two objects are created (“p” and “q”) and if a member is added to the second object (“q”) after the creation, V8 needs to keep the last hidden class created (for the first object “p”) and to create a new one (for the second object “q”) with the new member.&lt;/p&gt;

&lt;div class=&quot;ten centered columns&quot;&gt;
    &lt;img alt=&quot;transition information&quot; src=&quot;/assets/themes/twitter/img/post/21-03-13-v8/transition.PNG&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Everytime a new hidden class is created, the previous one is updated with a class transition indicating what hidden class has to be used instead of it.&lt;/p&gt;

&lt;h5 id=&quot;code-optimization&quot;&gt;Code optimization&lt;/h5&gt;
&lt;p&gt;Because V8 creates a new hidden class for each property, hidden class creation should be kept to a minimum. To do this, try to avoid adding properties after the object creation, and always initialize object members in the same order (to avoid the creation of different three of hidden classes).&lt;/p&gt;

&lt;p&gt;[Update] Another trick:
Monomorphic operations are operations which only work on objects with the same hidden class.
V8 creates a hidden class when we call a function. If we call it again with different parameter types, V8 needs to create another hidden class: &lt;strong&gt;Prefer monomorphic code to polymorphic code&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;more-example-on-how-v8-optimized-javascript-code&quot;&gt;More example on how V8 optimized JavaScript code&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;tagged-values&quot;&gt;Tagged values&lt;/h5&gt;

&lt;p&gt;To have an efficient representation of numbers and JavaScript objects, V8 represents both with a &lt;strong&gt;32 bit&lt;/strong&gt; value. It uses a bit to know if it is an object (flag = 1) or an integer (flag = 0) called here SMall Integer or &lt;strong&gt;SMI&lt;/strong&gt; because of its 31 bits. Then, if a numeric value is bigger than 31 bits, V8 will box the number, turning it to a double and creating a new object to put the number inside.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code optimization&lt;/strong&gt;: Try to use 31 bit signed numbers whenever possible to avoid the expensive boxing operation into JavaScript object.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;arrays&quot;&gt;Arrays&lt;/h5&gt;
&lt;p&gt;V8 uses to different methods to handle arrays:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Fast elements&lt;/strong&gt;: Designed for arrays where the set of keys are very compact. They have a &lt;strong&gt;linear storage buffer&lt;/strong&gt; that can be accessed very efficiently.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Dictionary elements&lt;/strong&gt;: Designed for sparse arrays which don’t have every element inside of them. It is actually a &lt;strong&gt;hash table&lt;/strong&gt;, more expensive to access than “Fast Elements”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Code optimization&lt;/strong&gt;: Be sure that V8 uses “Fast Elements” to handle arrays, in other words, avoid sparse arrays where keys are not next incremental numbers. Also, try to avoid pre-allocating large arrays. It is better to grow as you go. Finally, don’t delete elements in arrays: it makes the key set sparse.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;how-v8-compiles-javascript-code&quot;&gt;How V8 compiles JavaScript code?&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;V8 has two compilers!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A &lt;strong&gt;“Full” Compiler&lt;/strong&gt; that can generate good code for any JavaScript: good but not great JIT code. The goal of this compiler is to generate code quickly. To achieve its goal, it doesn’t do any type analysis and doesn’t know anything about types. Instead, it uses an &lt;strong&gt;Inline Caches&lt;/strong&gt; or “IC” strategy to refine knowledge about types while the program runs. IC is very efficient and brings about 20 times speed improvment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;An &lt;strong&gt;Optimizing Compiler&lt;/strong&gt; that produces great code for most of the JavaScript language. It comes later and re-compiles hot functions. The optimizing compiler takes types from the Inline Cache and make decisions about how to optimize the code better. However, some language features are not supported yet like try/catch blocks for instance. (The workaround for try/catch blocks is to write the “non stable” code in a function and call the function in the try block)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Code optimization&lt;/strong&gt;: V8 also supports &lt;strong&gt;de-optimization&lt;/strong&gt;: the optimizing compiler makes optimistic assumptions from the Inline Cache about the different types, de-optimization comes if these assumptions are invalid. For example, if a hidden class generated was not the one expected, V8 throws away the optimized code and comes back to the Full Compiler to get types again from the Inline Cache. This process is slow and should be avoided by trying to not change functions after they are optimized.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;resources&quot;&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Google I/O 2012 “Breaking the JavaScript Speed Limit with V8” with Daniel Clifford, tech lead and manager of the V8 team:
&lt;a href=&quot;https://www.youtube.com/watch?v=UJPdhx5zTaw&quot; title=&quot;video&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt; and
&lt;a href=&quot;http://v8-io12.appspot.com&quot; title=&quot;slides&quot; target=&quot;_blank&quot;&gt;slides&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;V8: an open source JavaScript engine:
&lt;a href=&quot;http://www.youtube.com/watch?v=hWhMKalEicY&quot; title=&quot;video&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt; of Lars Bak, V8 core engineer.&lt;/li&gt;
  &lt;li&gt;Nikkei Electronics Asia blog post: &lt;a href=&quot;http://techon.nikkeibp.co.jp/article/HONSHI/20090106/163615/&quot; title=&quot;go to techon.nikkeibp.co.jp&quot; target=&quot;_blank&quot;&gt;Why Is the New Google V8 Engine So Fast?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Relational database and Normalization</title>
   <link href="http://thibaultlaurens.github.io/database/2013/02/28/relational-database-and-normalization"/>
   <updated>2013-02-28T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.io/database/2013/02/28/relational-database-and-normalization</id>
   <content type="html">
&lt;p&gt;In relational database design, the normalization objective is to check whether or not a relationship fill the prerequisites for a given normal form. This will automatically minimize redundancy and anomalies in insertion, deletion and update.&lt;/p&gt;

&lt;p&gt;There is 4 basics and commonly used normal forms : &lt;strong&gt;first (1NF), second (2NF), third (3NF) and Boyce-Codd (BCNF)&lt;/strong&gt; normal forms.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;first-normal-form&quot;&gt;First Normal Form&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1NF&lt;/strong&gt; makes reference to the concept of &lt;strong&gt;atomicity&lt;/strong&gt; : Table represents a relation in which intersection of each row and column contains one and only one value.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;second-normal-form&quot;&gt;Second Normal Form&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;2NF&lt;/strong&gt; is a 1NF with every non primary key attribute is fully &lt;strong&gt;functionally dependent&lt;/strong&gt; on the primary key. This involves identifying partial dependencies on the primary key and removing them by creating a new relation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;third-normal-form&quot;&gt;Third Normal Form&lt;/h4&gt;

&lt;p&gt;A &lt;strong&gt;3NF&lt;/strong&gt; is a 2NF based on the concept of &lt;strong&gt;transitive dependency&lt;/strong&gt; (attributes A-&amp;gt;B and B-&amp;gt;C therefore A-&amp;gt;C). Like in 2NF, this involves identifying transitive dependencies on the primary key and removing them by creating a new relation.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;boyce-codd-normal-form&quot;&gt;Boyce-Codd Normal Form&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;BCNF&lt;/strong&gt;  makes reference to the concept of &lt;strong&gt;functional dependency&lt;/strong&gt; and &lt;strong&gt;candidate key&lt;/strong&gt; (the minimal superkey for the relation). In BCNF, every determinant has to be a candidate key. If the relation has functional dependencies where determinants are not candidate keys we have to remove them and create a new relation with a copy of their determinant. A 3NF relation with only one candidate key is automatically in BCNF.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A good relational model should be at least in 2NF, higher normal forms has their pros and cons. After 3NF, access time could be longer (we can fix this problem with Index on primary key) and the database structure could be difficult to maintain. But, you ensure non redondant and inconsistent data. The best things to do is to choose the level of normalization over the type of access : if data are more often edited than readed you should normalize as much as possible. Otherwise, if data are more often readed, then you should probably denormalize a little bit to improve data access, but keep in mind that redundancy can increase the amount of data and, in the end push down performances.&lt;/p&gt;

&lt;p&gt;Note: 1NF, 2NF, 3NF and BCNF focus on eliminating data redundancies based on undesirable functional dependencies. The are other normal forms after BCNF : &lt;strong&gt;Fourth (4NF), Fifth (5NF), Domain/Key (DKNF) and Sixth (6NF)&lt;/strong&gt; normal forms wich are focus on other things like multivalued dependency (4NF) or joind dependency implied by candidate keys (5NF).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby: tips, tricks and bytecode analysis</title>
   <link href="http://thibaultlaurens.github.io/ruby/2013/02/11/ruby-tips-tricks-and-deep-analysis"/>
   <updated>2013-02-11T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.io/ruby/2013/02/11/ruby-tips-tricks-and-deep-analysis</id>
   <content type="html">
&lt;h4 id=&quot;my-personal-experience-with-ruby&quot;&gt;My personal experience with Ruby&lt;/h4&gt;

&lt;p&gt;Basically I am not a Ruby developer: it means I never pushed to production any code written in Ruby but it doesn’t mean I don’t like to play with it. For now I wrote two programs in Ruby, two web applications (with the help of the excellent MVC framework Ruby on Rails) for university projects.&lt;/p&gt;

&lt;p&gt;The source code of these two projects can be found on Github:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;LaFourchette2012&lt;/strong&gt; (&lt;a href=&quot;https://github.com/ThibaultLaurens/La_Fourchette_2012&quot; title=&quot;github.com/ThibaultLaurens/La_Fourchette_2012&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;) written with four friends, this web application could be used to manage a restaurant’s chain (restaurants, customers &amp;amp; orders, waiters, cookers, payment, bill…). It has a nice “no-refresh” client interface written with &lt;strong&gt;BackboneJS&lt;/strong&gt; and an admin panel.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;TraditOnRails&lt;/strong&gt; (&lt;a href=&quot;https://github.com/ThibaultLaurens/TraditOnRails&quot; title=&quot;github.com/ThibaultLaurens/TraditOnRails&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt;) a more recent project is a basic fictitious trading application with fictitious currencies stored in a &lt;strong&gt;MongoDB&lt;/strong&gt; database. One characteristic of this project is that it uses a &lt;strong&gt;Node.JS&lt;/strong&gt; server and shows real-time updates of currencies rate with the help of &lt;strong&gt;socket.io&lt;/strong&gt; and a nice graph.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Oh and by the way, I should mention that this blog is written with &lt;strong&gt;Jekyll&lt;/strong&gt; so once again: RUBY please!&lt;/p&gt;

&lt;p&gt;So let’s first have a look at what is Ruby and at some details of the syntax that may surprise when you come from a C based programming language.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;what-is-ruby&quot;&gt;What is Ruby?&lt;/h4&gt;

&lt;p&gt;The ruby language is by definition &lt;strong&gt;a minimalist and natural language&lt;/strong&gt; which is, I think, a very good thing for software development. It is also a &lt;strong&gt;dynamic object oriented&lt;/strong&gt; language with &lt;strong&gt;multiple programming paradigms&lt;/strong&gt; like imperative, functional or reflective. It was first written in C as a single-pass interpreted language and was designed for &lt;strong&gt;programmer productivity and fun&lt;/strong&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;what-surprised-me-so-far-in-ruby&quot;&gt;What surprised me so far in Ruby&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Single line comments are declared with a &lt;strong&gt;#&lt;/strong&gt; and multi-line comments are declared with &lt;strong&gt;=begin&lt;/strong&gt; and &lt;strong&gt;=end&lt;/strong&gt; (this is strange right?)&lt;/li&gt;
  &lt;li&gt;Ruby doesn’t use curly brace to separate functions and set variable scope but use &lt;strong&gt;indentation&lt;/strong&gt; (not exactly in the same way that the cousin Python) and the keyword &lt;strong&gt;end&lt;/strong&gt; in the end of a code block&lt;/li&gt;
  &lt;li&gt;A variable will be automatically scoped into its block of code: classes and modules provide shelter from the global scope.&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;It uses &lt;strong&gt;Bloks&lt;/strong&gt; to iterate on array like for example array.all?{&lt;/td&gt;
          &lt;td&gt;n&lt;/td&gt;
          &lt;td&gt;n &amp;gt; 4}, a.keep_if{&lt;/td&gt;
          &lt;td&gt;n&lt;/td&gt;
          &lt;td&gt;n&amp;gt;1}&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;It has multiple types for function such as Blocks and lambdas. Blocks is the most common way to use &lt;a href=&quot;http://www.skorks.com/2010/05/closures-a-simple-explanation-using-ruby/&quot; title=&quot;skorks.com/2010/05/closures-a-simple-explanation-using-ruby/&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;closure&lt;/strong&gt;&lt;/a&gt; (concept from the Scheme language) in Ruby and is one of the most powerful feature of Ruby, it allows the developer to pass code to &lt;strong&gt;iterators&lt;/strong&gt; such as each, detect or inject. (I should also say that Ruby extends the concept of block into a new one called &lt;a href=&quot;http://www.ruby-doc.org/core-1.9.3/Proc.html&quot; title=&quot;ruby-doc.org/core-1.9.3/Proc.html&quot; target=&quot;_blank&quot;&gt;Proc&lt;/a&gt; which is &lt;strong&gt;first class citizen&lt;/strong&gt; and can be simply created by adding Proc.new in a block.)&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/ThibaultLaurens/4751477.js?file=block.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;Example of a Block in Rails: The code on the left side of the “do” will interact with the variable inside the two pipes on its right side.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;how-it-works-under-the-hood&quot;&gt;How it works under the hood?&lt;/h4&gt;

&lt;p&gt;One thing the university teach me is that you can’t learn a new programming language if you don’t see how it works under the hood. So, let’s go a little deeper inside Ruby!&lt;/p&gt;

&lt;p&gt;The actual version of Ruby, Ruby 1.9, uses &lt;strong&gt;YARV&lt;/strong&gt; (&lt;a href=&quot;http://en.wikipedia.org/wiki/YARV&quot; title=&quot;wikipedia.org/wiki/YARV&quot; target=&quot;_blank&quot;&gt;Yet another Ruby VM&lt;/a&gt;, also called &lt;strong&gt;KRI&lt;/strong&gt;) which is a &lt;strong&gt;bytecode interpreter&lt;/strong&gt;. YARV was designed to reduce the execution time of Ruby programs.
When a ruby program is executed, the first step will be to generate YARV instructions. In order to achieve this step, the code is first &lt;strong&gt;tokenized&lt;/strong&gt;, then tokens are grouped into Ruby statements: it’s the &lt;strong&gt;parsing&lt;/strong&gt;. Finally these statements are compiled into low level &lt;strong&gt;YARV instructions&lt;/strong&gt;.
Ruby doesn’t use &lt;strong&gt;Yacc&lt;/strong&gt; (&lt;a href=&quot;http://en.wikipedia.org/wiki/Yacc&quot; title=&quot;wikipedia.org/wiki/Yacc&quot; target=&quot;_blank&quot;&gt;Yet Another Compiler Compiler&lt;/a&gt;) as &lt;strong&gt;parser generator&lt;/strong&gt; but &lt;a href=&quot;http://en.wikipedia.org/wiki/GNU_bison&quot; title=&quot;wikipedia.org/wiki/GNU_bison&quot; target=&quot;_blank&quot;&gt;Bison&lt;/a&gt;. The parser code is processed at the &lt;strong&gt;build time&lt;/strong&gt; of Ruby and not at the run time of the program.
The second step is to run YARV instructions. YARV possess low level structures. It has for instance two instructions called &lt;strong&gt;branchif&lt;/strong&gt; and &lt;strong&gt;branchunless&lt;/strong&gt; (which can be understand has low level if and unless Ruby statement) and a low level function called &lt;strong&gt;jump&lt;/strong&gt; in order to change the program counter and move into the compiled program.&lt;/p&gt;

&lt;p&gt;For example, this if/else statement in Ruby…&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ThibaultLaurens/4751477.js?file=login.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
(OK now hold your breath just a few seconds… and go!)&lt;/p&gt;

&lt;p&gt;… corresponds to these YARV instructions:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ThibaultLaurens/4751477.js?file=yarv.rb&quot;&gt; &lt;/script&gt;

&lt;p&gt;One thing or two about this code:&lt;/p&gt;

&lt;p&gt;In line 0077, the getlocal instruction will leave a true or false value on the stack. Then, if the condition is false (does the user exist?), the branchunless line 0079 will jump to the line 131 where the else is defined (or should be defined, it looks like my Ruby console didn’t want me to see it!), to jump the if. If the condition is true, the code just after the brancheunless will be compiled and then a jump instruction line 0129 will jump to the end of the method to skip the else.&lt;/p&gt;

&lt;p&gt;About the first line, it starts with &lt;strong&gt;local table&lt;/strong&gt;. In fact, this is because Ruby encapsulates the execution of code by block. This series of bytecode instructions are specific to this if/else block. A block in Ruby is like a &lt;strong&gt;closure&lt;/strong&gt;. It’s composed by a function to be executed (here the bytecode, internally it’s an &lt;strong&gt;instruction sequence pointer&lt;/strong&gt;) and an environment which is a &lt;strong&gt;dynamic frame pointer&lt;/strong&gt; (which points right to the &lt;strong&gt;stack&lt;/strong&gt;).
In addition, a block can have an object environment. Internally Ruby represent a block using a &lt;strong&gt;C structure&lt;/strong&gt; called &lt;strong&gt;rb_block_t&lt;/strong&gt;.
YARV creates object with &lt;strong&gt;RObject&lt;/strong&gt; structures which contains a &lt;strong&gt;klass&lt;/strong&gt; pointer to the class and an &lt;strong&gt;ivptr (instance variable pointer)&lt;/strong&gt; which points to an array of instance variable of the object.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;the-best-is-to-see-under-a-microscope&quot;&gt;The best is to see under a microscope&lt;/h4&gt;

&lt;p&gt;That’s all for now with Ruby but if you like this kind of things I may suggest you to read the &lt;strong&gt;excellent book&lt;/strong&gt; of &lt;strong&gt;Pat Shaughnessy&lt;/strong&gt;
&lt;a href=&quot;http://patshaughnessy.net/ruby-under-a-microscope&quot; title=&quot;patshaughnessy.net/ruby-under-a-microscope&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;Ruby Under a Microscope&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div&gt;&lt;img alt=&quot;Ruby!&quot; src=&quot;/assets/themes/twitter/img/post/11-02-13-ruby/ruby.jpg&quot; /&gt;&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Generics with C#</title>
   <link href="http://thibaultlaurens.github.io/microsoft/2013/01/12/generics-with-csharp"/>
   <updated>2013-01-12T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.io/microsoft/2013/01/12/generics-with-csharp</id>
   <content type="html">
&lt;p&gt;The most important new feature of C# 2.0 (which was released in 2005) is &lt;strong&gt;generics&lt;/strong&gt;. Understanding how they are implemented is essential to understand advances and key features they will bring later to
C# and the .NET framework (like &lt;strong&gt;LINQ&lt;/strong&gt; for example).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;What are generics?&lt;/em&gt;&lt;br /&gt;
    Also called parametric polymorphism, generics consists in declaring a type with a type parameter that will be instantiated when it will be needed. It adds a great flexibility to the language.&lt;br /&gt;
    In C#, you can declare generics with the help of &lt;strong&gt;&amp;lt; T &amp;gt;&lt;/strong&gt; where T is the parameterized type. Classes, interfaces, methods, properties and delegates can be defined. The exemple below declares a generic simplified version of the List&amp;lt; T &amp;gt; class (available in the .NET framework)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4461585.js?file=list.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Then, this List&amp;lt; T &amp;gt; can be used by adding objects to the list and using methods of the list.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4461585.js?file=program.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;An important thing to keep in mind is that parameterized objects has to have &lt;strong&gt;the same type&lt;/strong&gt;. If another class is created, an object of this second class cannot be added to the &lt;em&gt;CarList&lt;/em&gt;.&lt;br /&gt;
Generic with multiple parameterized types can also be declared, in this example a &lt;strong&gt;List&amp;lt; T, U &amp;gt;&lt;/strong&gt; could be declared.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Constraints&lt;/strong&gt; can be added to generics through the &lt;strong&gt;“where”&lt;/strong&gt; keyword. It consists in declaring restriction about the parameterized type.
For instance, the parameterized type has to be a reference type or it has to derive from a specific class. These constraints avoid compile-time errors. For more information on constraints on type parameters
check the C# programming guide on the 
&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/d5x73970.aspx&quot; title=&quot;msdn.microsoft.com/en-us/library/d5x73970.aspx&quot; target=&quot;_blank&quot;&gt;msdn website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The website list 6 differents type of constraints:&lt;/p&gt;

&lt;table class=&quot;responsive&quot;&gt;
              &lt;tbody&gt;
              &lt;tr&gt;
                &lt;th&gt;&lt;p&gt;&lt;strong&gt;Constraint&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
                &lt;th&gt;&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;&lt;/th&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T: struct&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be a value type. Any value type except Nullable can be specified.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : class&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be a reference type; this applies also to any class, interface, delegate, or array type.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : new()&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must have a public parameterless constructor. When used together with other constraints, the &lt;span&gt;&lt;span class=&quot;input&quot;&gt;new()&lt;/span&gt;&lt;/span&gt; constraint must be specified last.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : &amp;lt;base class name&amp;gt;&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be or derive from the specified base class.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : &amp;lt;interface name&amp;gt;&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument must be or implement the specified interface. Multiple interface constraints can be specified. The constraining interface can also be generic.&lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
              &lt;tr&gt;
                &lt;td&gt;&lt;p&gt;where T : U&lt;/p&gt;&lt;/td&gt;
                &lt;td&gt;
                  &lt;p&gt;The type argument supplied for T must be or derive from the argument supplied for U. &lt;/p&gt;
                &lt;/td&gt;
              &lt;/tr&gt;
            &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The example below shows a generic class declaration where the parameterized type has to implement a specific interface.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4461585.js?file=generic.cs&quot;&gt; &lt;/script&gt;

&lt;p&gt;We obtained an error with types that don’t implement “ICustomInterface” like string.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The C# design team made the choice to integrate generics directly &lt;strong&gt;into the CLR&lt;/strong&gt; in order to avoid some problem seen in Java (Java doesn’t integrate generics in the JVM and uses type erasure) but also, to guarantee cross language compatibility through
    the .NET framework. C# use &lt;strong&gt;reification&lt;/strong&gt; for generics and it results in a complete synchronisation between the compile time and the runtime. In other words, generics instantiation appends at runtime and 
    this is only possible because the IL code produce by the CLR is totally type neutral. Have a look at this excellent 
&lt;a href=&quot;http://broadcast.oreilly.com/2009/03/an-interview-with-anders-hejls.html&quot; title=&quot;broadcast.oreilly.com/2009/03/an-interview-with-anders-hejls&quot; target=&quot;_blank&quot;&gt;interview with Anders Hejlsberg&lt;/a&gt;
(lead architect of C#, but also author of Turbo Pascal and chief architect of Delphi).&lt;/p&gt;

&lt;p&gt;The example below shows a generic list of string and how its type information is preserved in the &lt;strong&gt;IL code&lt;/strong&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/4461585.js?file=generic.il&quot;&gt; &lt;/script&gt;

&lt;ul&gt;
  &lt;li&gt;It can be noticed here the genericity of the IL code. The “ldarg” instruction for instance (line 5, IL_0000) which takes a method argument and put it on the stack, has no specific type to work with.&lt;/li&gt;
  &lt;li&gt;The line 4 shows the list of string but with a number &lt;em&gt;List`1&amp;lt; string &amp;gt;&lt;/em&gt;, this number is the &lt;strong&gt;arity&lt;/strong&gt; and correponds to the number of parameterized type used (List&amp;lt; T, U &amp;gt; has an arity of 2).&lt;/li&gt;
  &lt;li&gt;When the parameterized type is used, the IL code add a &lt;strong&gt;!&lt;/strong&gt; as it can be seen line 11 (IL_0012)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;If you have ever played with C# or the .NET framework you should know that &lt;strong&gt;System.Object&lt;/strong&gt; is the base class of every .NET classes. Then, you can think that you could use this class instead of creating generic classes, by creating
an &lt;strong&gt;object[]&lt;/strong&gt; for instance. However, there are reasons why you should always use generics instead of System.Object:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;No boxing/unboxing operations on value types and no cast operations which increase performance, reduce memory consumption and makes the code more readable&lt;/li&gt;
  &lt;li&gt;No runtime exeptions, with generics you have a compile-time type check.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The complete technical guide of &lt;strong&gt;Generics&lt;/strong&gt; is available online on the msdn website
&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/512aeb7t.aspx&quot; title=&quot;msdn.microsoft.com/en-us/library/512aeb7t.aspx&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Calculating service availability</title>
   <link href="http://thibaultlaurens.github.io/system/2013/01/05/calculating-service-availability"/>
   <updated>2013-01-05T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.io/system/2013/01/05/calculating-service-availability</id>
   <content type="html">
&lt;p&gt;&lt;strong&gt;MTBF&lt;/strong&gt;, &lt;strong&gt;MTTD&lt;/strong&gt;, &lt;strong&gt;MTTR&lt;/strong&gt; and &lt;strong&gt;MTTF&lt;/strong&gt; are the four parameters required to calculate the availability of a service or an individual component in a specific architecture.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MTBF is the &lt;strong&gt;Mean Time Between Faults&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;MTTD is the &lt;strong&gt;Mean Time To Detection&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;MTTR is the &lt;strong&gt;Mean Time To Repair&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;MTTF is the &lt;strong&gt;Mean Time To Failure&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, once we got this, there are just a few little formula to know :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;MTBF = MTTD + MTTR + MTTF&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Availabiliy = MTBF / (MTBF + MTTR)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, a component with a MTBF of 8 days and a MTTR of 3 hours will have:&lt;br /&gt;
&lt;strong&gt;Availability&lt;/strong&gt; = (8*24) / (8*24 + 3) = &lt;strong&gt;0.985&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;A good way to understand availability is to look at the downtime per year they represent:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;90% availability = 36 days and 12 hours downtime/year&lt;/li&gt;
  &lt;li&gt;99% availability = 87 hours, 36 minutes downtime/year&lt;/li&gt;
  &lt;li&gt;99.9% availability = 8 hours,45 minutes, 36 seconds downtime/year&lt;/li&gt;
  &lt;li&gt;99.99% availability = 52 minutes,33 seconds downtime/year&lt;/li&gt;
  &lt;li&gt;99.999% availability = 5 minutes,15 seconds downtime / year&lt;/li&gt;
  &lt;li&gt;99.9999% availability = 31 seconds downtime/year&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Hello Blog!</title>
   <link href="http://thibaultlaurens.github.io/ruby/2013/01/03/hello-world"/>
   <updated>2013-01-03T00:00:00+00:00</updated>
   <id>http://thibaultlaurens.github.io/ruby/2013/01/03/hello-world</id>
   <content type="html">
&lt;p&gt;For a first post, I would like to briefly explain how I built this blog. If you are tired of Wordpress or others complicated blog engines and are looking for a very simple and effective way to blog, then 
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki&quot; title=&quot;github.com/mojombo/jekyll&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; is what you are looking for! 
As mentioned in the Github repository, “Jekyll is a blog aware, static site generator in Ruby” and is the simpler way to blog I have seen so far.&lt;/p&gt;

&lt;p&gt;This blog is based on it and is hosted right on 
&lt;a href=&quot;https://github.com&quot; title=&quot;github.com&quot; target=&quot;_blank&quot;&gt;Github&lt;/a&gt;.
Yes, because Jekyll is actually the engine used by Github Pages, it is very simple to host a Jekyll blog on a repository named &lt;em&gt;“USERNAME.github.com”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Dealing with Jekyll means all of these things that are easily integrated and ready to use like for instance
&lt;a href=&quot;http://disqus.com/&quot; title=&quot;disqus.com&quot; target=&quot;_blank&quot;&gt;Disqus&lt;/a&gt; for comments or even
&lt;a href=&quot;http://www.google.com/analytics/&quot; title=&quot;google.com/analytics&quot; target=&quot;_blank&quot;&gt;Google Analytics&lt;/a&gt;. 
A lot of html templates are also available using
&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot; title=&quot;twitter.github.com/bootstrap&quot; target=&quot;_blank&quot;&gt;Twitter Bootstrap&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I think Jekyll is the best way to blog for developers because it allows to work with a blog as we work with any project: use of a git repository, work and test in local, update from the command line..
In addition, what makes Jekyll really interesting for a blog is that it runs text-to-html converters like &lt;em&gt;Markdown&lt;/em&gt;, &lt;em&gt;Textile&lt;/em&gt; or &lt;em&gt;Liquid&lt;/em&gt; and allows the web-writer to add inline html. In other word, you
can write a post in a simple text editor, add some html tags inside, push it to your Github repository and that’s it!&lt;/p&gt;

&lt;p&gt;The full stack of the blog is simply Github, Jekyll and Twitter Bootstrap, you can watch/fork it
&lt;a href=&quot;https://github.com/ThibaultLaurens/thibaultlaurens.github.com&quot; title=&quot;github.com/ThibaultLaurens/thibaultlaurens.github.com&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;What I really like with &lt;strong&gt;Jekyll&lt;/strong&gt; so far:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: it is fast and fast to build a blog with&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Light&lt;/strong&gt;: there is no database and no hosting problem&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Tools&lt;/strong&gt;: a lot of “out of the box” tools available&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Web-writers&lt;/strong&gt; oriented: use of text-to-html converters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you want to get started blogging with Jekyll, the best way is probably to check
&lt;a href=&quot;http://jekyllbootstrap.com/&quot; title=&quot;jekyllbootstrap.com&quot; target=&quot;_blank&quot;&gt;Jekyll-Bootstrap&lt;/a&gt;, a little framework which makes the process even easier.&lt;/p&gt;
</content>
 </entry>
 

</feed>
